# -*- coding: utf-8 -*-
"""car prices ANN EDA ML.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eRAYPnAggZlSwZ7blI-IvZmkN9AFfedc
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler

df= pd.read_csv('Train.csv')

df.head()

df.isnull().sum()

df.describe()

df.duplicated().sum()

df.drop_duplicates(inplace=True)

df.columns

df['Age'] = abs(df['Prod. year']- 2025)

df.drop(['ID','Manufacturer','Model','Prod. year'],axis=1,inplace=True)

df['Wheel'].value_counts()

df['Doors'].value_counts()

df.replace(to_replace='04-May', value=4, inplace=True)
df.replace(to_replace='02-Mar', value=2, inplace=True)
df.replace(to_replace='>5', value=5, inplace=True)

df['Levy'].value_counts()

df['Levy'] = df['Levy'].replace(to_replace='-',value=0).astype(int)

df['Mileage'].value_counts()

df['Mileage'] = df['Mileage'].str.replace('km','').astype(int)

df['Age'].dtype

df.info()

df['Engine volume'].value_counts()

df.head()

df['is_turbo'] = df['Engine volume'].str.contains(r'Turbo',case=False,na=False).astype(int)

df['Engine volume'] = df['Engine volume'].str.replace(r'Turbo','').astype(float)

df.info()

from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()
df['Color'] = label_encoder.fit_transform(df['Color'])

df = pd.get_dummies(df,drop_first=True).astype(int)

df.head()

df.columns

X = df.drop('Price',axis=1)
y = df['Price']

from sklearn.model_selection import train_test_split

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3, random_state=42)

df.describe()

import seaborn as sns

sns.boxplot(df)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

from sklearn.tree import DecisionTreeRegressor

model = DecisionTreeRegressor(random_state=131, max_depth=23)
model.fit(X_train,y_train)

pred = model.predict(X_test)

from sklearn.metrics import r2_score
r2_score(y_test,pred)

